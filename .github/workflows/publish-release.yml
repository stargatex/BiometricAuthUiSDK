name: Publish Release

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to publish (optional, will extract from tag if not provided)'
        required: false
        type: string
    secrets:
      MAVEN_CENTRAL_USERNAME:
        required: true
      MAVEN_CENTRAL_PASSWORD:
        required: true
      GPG_KEY_SECRET:
        required: true
      GPG_KEY_PASSWORD:
        required: true

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: false

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx8192M -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -Dkotlin.daemon.jvm.options=-Xmx8192M

permissions:
  contents: write

jobs:
  publish:
    name: Publish Release to SonarType Central
    runs-on: macos-latest
    environment: publish
    env:
      ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
      ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
      ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY_SECRET }}
      ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_KEY_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-cache-${{ runner.os }}-

      - name: Restore Kotlin/Native cache
        uses: actions/cache@v4
        with:
          path: ~/.konan/cache
          key: kotlin-native-cache-${{ runner.os }}-${{ hashFiles('**/*.kt', '**/*.kts', '**/*.def') }}
          restore-keys: kotlin-native-cache-${{ runner.os }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Determine version
        id: get_version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            # Use manually provided version
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "SOURCE=manual" >> $GITHUB_OUTPUT
            echo "Using manual version: ${{ inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract from tag
            VERSION="${GITHUB_REF#refs/tags/v}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "SOURCE=tag" >> $GITHUB_OUTPUT
            echo "Using tag version: $VERSION"
          else
            echo "Error: No version provided and not triggered by tag"
            exit 1
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "Version format is valid: $VERSION"

      - name: Check if version exists in changelog
        id: check_changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            if grep -q "## \[${{ steps.get_version.outputs.VERSION }}\]" CHANGELOG.md; then
              echo "CHANGELOG_EXISTS=true" >> $GITHUB_OUTPUT
              echo "Found changelog entry for version ${{ steps.get_version.outputs.VERSION }}"
            else
              echo "CHANGELOG_EXISTS=false" >> $GITHUB_OUTPUT
              echo "Warning: No changelog entry found for version ${{ steps.get_version.outputs.VERSION }}"
            fi
          else
            echo "CHANGELOG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Warning: CHANGELOG.md not found"
          fi

      - name: Set release version
        run: |
          echo "releaseVersion=${{ steps.get_version.outputs.VERSION }}" >> gradle.properties

      - name: Prepare release
        run: ./gradlew prepareRelease --no-daemon --stacktrace

      - name: Publish release to SonarType Central
        run: ./gradlew publishAllLibraries --no-configuration-cache --no-daemon --stacktrace

      - name: Save Kotlin/Native cache
        if: ${{ always() }}
        uses: actions/cache@v4
        with:
          path: ~/.konan/cache
          key: kotlin-native-cache-${{ runner.os }}-${{ hashFiles('**/*.kt', '**/*.kts', '**/*.def') }}

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ] && [ "${{ steps.check_changelog.outputs.CHANGELOG_EXISTS }}" = "true" ]; then
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
            changelog_content=$(awk '/## \[${{ steps.get_version.outputs.VERSION }}\]/{flag=1; next} /## \[/{flag=0} flag' CHANGELOG.md)
            if [ -n "$changelog_content" ]; then
              echo "$changelog_content" >> $GITHUB_OUTPUT
            else
              echo "Release ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
            fi
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "Published from: ${{ steps.get_version.outputs.SOURCE }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.SOURCE == 'manual' && format('v{0}', steps.get_version.outputs.VERSION) || github.ref }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false
          generate_release_notes: true
          append_body: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        if: always()
        run: rm -f local.properties

      - name: Notify on success
        if: success()
        run: |
          echo "Release ${{ steps.get_version.outputs.VERSION }} published successfully!"
          echo "Version source: ${{ steps.get_version.outputs.SOURCE }}"
          echo "SonarType Central: Published"
          echo "GitHub Release: Created"
          echo "Git Tag: v${{ steps.get_version.outputs.VERSION }} (created by GitHub Release action)"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Release publication failed"
          echo "Version: ${{ steps.get_version.outputs.VERSION }}"
          echo "Version source: ${{ steps.get_version.outputs.SOURCE }}"
          echo "Please check the logs above for details"